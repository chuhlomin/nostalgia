import { app, protocol, net, BrowserWindow, shell } from "electron";
import electronUpdater from "electron-updater";
import { URL as URL$1 } from "node:url";
class ModuleRunner {
  #promise;
  constructor() {
    this.#promise = Promise.resolve();
  }
  then(onfulfilled, onrejected) {
    return this.#promise.then(onfulfilled, onrejected);
  }
  init(module) {
    const p = module.enable(this.#createModuleContext());
    if (p instanceof Promise) {
      this.#promise = this.#promise.then(() => p);
    }
    return this;
  }
  #createModuleContext() {
    return {
      app
    };
  }
}
function createModuleRunner() {
  return new ModuleRunner();
}
protocol.registerSchemesAsPrivileged([
  {
    scheme: "vhs",
    privileges: {
      bypassCSP: true,
      stream: true
    }
  }
]);
class WindowManager {
  #preload;
  #renderer;
  #openDevTools;
  constructor({ initConfig, openDevTools = false }) {
    this.#preload = initConfig.preload;
    this.#renderer = initConfig.renderer;
    this.#openDevTools = openDevTools;
  }
  async enable({ app: app2 }) {
    await app2.whenReady();
    await this.restoreOrCreateWindow(true);
    app2.on("second-instance", () => this.restoreOrCreateWindow(true));
    app2.on("activate", () => this.restoreOrCreateWindow(true));
  }
  async createWindow() {
    protocol.handle("vhs", (request) => {
      const file = request.url.replace("vhs://", "file://");
      return net.fetch(file);
    });
    const browserWindow = new BrowserWindow({
      show: false,
      // Use the 'ready-to-show' event to show the instantiated BrowserWindow.
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        sandbox: false,
        // Needed to read files from the file system.
        webviewTag: false,
        // The webview tag is not recommended. Consider alternatives like an iframe or Electron's BrowserView. @see https://www.electronjs.org/docs/latest/api/webview-tag#warning
        preload: this.#preload.path
      }
    });
    if (this.#renderer instanceof URL) {
      await browserWindow.loadURL(this.#renderer.href);
    } else {
      await browserWindow.loadFile(this.#renderer.path);
    }
    return browserWindow;
  }
  async restoreOrCreateWindow(show = false) {
    let window = BrowserWindow.getAllWindows().find((w) => !w.isDestroyed());
    if (window === void 0) {
      window = await this.createWindow();
    }
    if (!show) {
      return window;
    }
    if (window.isMinimized()) {
      window.restore();
    }
    window?.show();
    if (this.#openDevTools) {
      window?.webContents.openDevTools();
    }
    window.focus();
    return window;
  }
  async registerHandle() {
    protocol.handle("vhs", (request) => {
      return net.fetch("file:///Users/chuhlomin/Video/%D0%9C%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%20%D0%9A%D0%B0%D1%86%20%D1%87%D0%B8%D1%82%D0%B0%D0%B5%D1%82%20%D1%80%D1%8D%D0%BF%20%D0%BF%D0%BE%D0%B4%20%D0%B1%D0%B8%D1%82%20%D0%9A%D1%80%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%BE%D0%BA.%20@Max_Kats%20[xRJex9wuQd8].mov ");
    });
  }
}
function createWindowManagerModule(...args) {
  return new WindowManager(...args);
}
class ApplicationTerminatorOnLastWindowClose {
  enable({ app: app2 }) {
    app2.on("window-all-closed", () => app2.quit());
  }
}
function terminateAppOnLastWindowClose(...args) {
  return new ApplicationTerminatorOnLastWindowClose(...args);
}
class HardwareAccelerationModule {
  #shouldBeDisabled;
  constructor({ enable }) {
    this.#shouldBeDisabled = !enable;
  }
  enable({ app: app2 }) {
    if (this.#shouldBeDisabled) {
      app2.disableHardwareAcceleration();
    }
  }
}
function hardwareAccelerationMode(...args) {
  return new HardwareAccelerationModule(...args);
}
class AutoUpdater {
  #logger;
  #notification;
  constructor({
    logger = null,
    downloadNotification = void 0
  } = {}) {
    this.#logger = logger;
    this.#notification = downloadNotification;
  }
  async enable() {
    await this.runAutoUpdater();
  }
  getAutoUpdater() {
    const { autoUpdater: autoUpdater2 } = electronUpdater;
    return autoUpdater2;
  }
  async runAutoUpdater() {
    const updater = this.getAutoUpdater();
    try {
      updater.logger = this.#logger || null;
      updater.fullChangelog = true;
      if (void 0) ;
      return await updater.checkForUpdatesAndNotify(this.#notification);
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes("No published versions")) {
          return null;
        }
      }
      throw error;
    }
  }
}
function autoUpdater(...args) {
  return new AutoUpdater(...args);
}
class AbstractSecurityRule {
  enable({ app: app2 }) {
    app2.on("web-contents-created", (_, contents) => this.applyRule(contents));
  }
}
class BlockNotAllowedOrigins extends AbstractSecurityRule {
  #allowedOrigins;
  constructor(allowedOrigins = /* @__PURE__ */ new Set()) {
    super();
    this.#allowedOrigins = structuredClone(allowedOrigins);
  }
  applyRule(contents) {
    contents.on("will-navigate", (event, url) => {
      const { origin } = new URL$1(url);
      if (this.#allowedOrigins.has(origin)) {
        return;
      }
      event.preventDefault();
      {
        console.warn(`Blocked navigating to disallowed origin: ${origin}`);
      }
    });
  }
}
function allowInternalOrigins(...args) {
  return new BlockNotAllowedOrigins(...args);
}
class ExternalUrls {
  #externalUrls;
  constructor(externalUrls) {
    this.#externalUrls = externalUrls;
  }
  enable({ app: app2 }) {
    app2.on("web-contents-created", (_, contents) => {
      contents.setWindowOpenHandler(({ url }) => {
        const { origin } = new URL$1(url);
        if (this.#externalUrls.has(origin)) {
          shell.openExternal(url).catch(console.error);
        } else {
          console.warn(`Blocked the opening of a disallowed external origin: ${origin}`);
        }
        return { action: "deny" };
      });
    });
  }
}
function allowExternalUrls(...args) {
  return new ExternalUrls(...args);
}
async function initApp(initConfig) {
  const moduleRunner = createModuleRunner().init(createWindowManagerModule({ initConfig, openDevTools: true })).init(terminateAppOnLastWindowClose()).init(hardwareAccelerationMode({ enable: true })).init(autoUpdater()).init(allowInternalOrigins(
    new Set(initConfig.renderer instanceof URL ? [initConfig.renderer.origin] : [])
  )).init(
    allowExternalUrls(
      new Set(
        initConfig.renderer instanceof URL ? [
          "https://vite.dev",
          "https://developer.mozilla.org",
          "https://solidjs.com",
          "https://qwik.dev",
          "https://lit.dev",
          "https://react.dev",
          "https://preactjs.com",
          "https://www.typescriptlang.org",
          "https://vuejs.org"
        ] : []
      )
    )
  );
  await moduleRunner;
}
export {
  initApp
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
